from dotenv import load_dotenv
import openai
import os
import logging
import warnings
import ast
warnings.filterwarnings("ignore")
# Configure basic logging
logging.basicConfig(filename='app_COT_BT.log', level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

learning_outcomes = {

"Chain_of_Thought":{0: ['Outcome 1: Understand the fundamental concepts of file types and encoding, including the distinction between text and binary files, and the role of encoding in interpreting text files correctly.', 'Outcome 2: Gain proficiency in identifying and applying different character encoding standards such as ASCII, UTF-8, UTF-16, and codepages, and understand their significance in data representation and interoperability among systems.', 'Outcome 3: Develop the ability to read and write text files in Python using various encodings, handle encoding errors effectively, and specify the correct encoding when performing file I/O operations.', 'Outcome 4: Acquire the skills to detect the encoding of a file using Python libraries and tools, and understand the importance of correct encoding in avoiding data corruption or loss.', 'Outcome 5: Learn to work with Unicode characters and emojis in Python, including reading, writing, and encoding/decoding them, to support global text processing and representation needs.'], 1: ['Outcome 1: Understand and apply basic Python data structures such as lists and dictionaries, including operations like indexing, slicing, concatenation, and methods for list manipulation such as append(), pop(), and remove().', 'Outcome 2: Demonstrate proficiency in text preprocessing techniques for natural language processing, including tokenization, lemmatization, and the removal of stopwords to prepare text data for analysis.', 'Outcome 3: Develop skills in exploratory data analysis (EDA) with a focus on textual data, utilizing Python libraries such as NLTK for natural language tasks and matplotlib for data visualization, including generating word clouds and bar plots of word frequencies.', "Outcome 4: Gain insights into sentiment analysis using the NLTK library's SentimentIntensityAnalyzer to evaluate the emotional tone of texts, understanding the significance of positive, negative, neutral, and compound scores.", 'Outcome 5: Explore advanced text analysis concepts such as n-grams for capturing word sequences and their impact on the meaning of texts, and apply these concepts to generate and interpret word clouds and sentiment analysis results.'], 2: ['Outcome 1: Understand and apply the order of operations in arithmetic, boolean, and string expressions, including the use of functions, parentheses, exponents, and logical operators to evaluate and produce results.', 'Outcome 2: Develop proficiency in manipulating strings in Python through slicing, concatenation, and applying string methods to change case, capitalize, or modify output, enhancing text processing skills.', "Outcome 3: Master the use of Python's built-in data structures such as lists, including creating, accessing, and manipulating lists, and understand the concept of indexing and slicing to manage collections of data effectively.", 'Outcome 4: Gain the ability to control the flow of a Python program using conditional statements (if, elif, else) and loops (while, for), enabling the execution of code blocks based on conditions and the iteration over sequences or collections.', 'Outcome 5: Acquire skills in creating and using list comprehensions for efficient data processing and manipulation, and understand the basics of importing and using external libraries and functions in Python for extended functionality.'], 3: ["Outcome 1: Gain a comprehensive understanding of databases, specifically MongoDB, including its significance, types of databases, and why MongoDB is preferred for certain applications. Students will learn to perform CRUD operations, manage databases using Python's `pymongo` library, and understand the importance of indexing and aggregation for optimizing database queries.", 'Outcome 2: Develop proficiency in using Pandas for data analysis in Python, including creating, manipulating, and querying data frames and series. Students will learn to perform data selection, manipulation, and summarization techniques essential for analyzing large datasets, as well as exporting and importing data from various sources.', "Outcome 3: Master the fundamentals of Python programming, including understanding Python's character set, identifiers, literals, operators, and control structures. Students will learn to write efficient Python code using best practices and understand the significance of data types, variable scope, and input/output operations in Python.", 'Outcome 4: Apply advanced Python programming concepts such as function definition, usage of loops, conditional statements, and error handling to solve complex problems. Students will also learn to implement and manipulate data structures, perform file operations, and use Python libraries for specific tasks.', 'Outcome 5: Understand and apply various Python operators, including arithmetic, relational, assignment, logical, membership, and identity operators, to perform complex operations on data. Students will also learn to use punctuators and understand their role in structuring Python programs.'], 4: ['Outcome 1: Gain proficiency in Python programming, including understanding its syntax, data types, variables, functions, and control structures, to develop foundational skills necessary for data analysis and machine learning applications.', 'Outcome 2: Develop the ability to perform advanced data manipulation and analysis using NumPy, including array operations, statistical analysis, and handling multidimensional data, to support complex scientific computing tasks.', 'Outcome 3: Master the techniques of reading and writing files in Python, encompassing various modes of file operations and understanding the importance of context managers for efficient and safe handling of file I/O operations.', 'Outcome 4: Acquire the skills to create informative and visually appealing data visualizations using Matplotlib, including scatter plots, line graphs, and customization of plot aesthetics, to effectively communicate data insights.', 'Outcome 5: Understand the fundamentals of text analytics, including the extraction of high-quality information from text data, and explore the distinctions and applications of text mining, natural language processing (NLP), and computational linguistics in business and research contexts.'], 5: ['Outcome 1: Master the fundamentals of predictive modeling using Python, including data loading, exploration, and visualization with libraries such as Matplotlib, Pandas, and NumPy.', 'Outcome 2: Develop proficiency in implementing and interpreting linear regression models, including understanding model parameters, fitting models to data, and evaluating model performance using metrics like R^2 and RMSE.', 'Outcome 3: Gain the ability to enhance predictive models by incorporating polynomial and sinusoidal features, and compare the performance of linear models with these advanced models to identify the most suitable approach for given data.', 'Outcome 4: Acquire skills in data synthesis and manipulation, including generating datasets with linear and non-linear relationships, adding noise to data, and saving datasets for analysis, using Python.', 'Outcome 5: Understand the principles of encoding and decoding text in Python, including working with different character encodings, handling encoding errors, and performing file I/O operations for text analysis.']},
"Zero-Shot" : {0: ['Understand and differentiate between text and binary files, including the significance of encoding and decoding in the context of file I/O operations.', 'Gain proficiency in reading and writing files in Python with various encodings, specifically mastering the use of ASCII, UTF-8, UTF-16, and UTF-32 encodings.', 'Develop the ability to effectively address and troubleshoot encoding errors in Python, including the use of specific encoding parameters and understanding the implications of using different encodings.', 'Acquire the skills to detect and specify file encodings in Python applications, utilizing tools and libraries such as chardet for encoding detection.', 'Understand the representation and manipulation of text data, including special characters and emojis, through encoding standards and their practical application in Python programming.'], 1: ['Understand and apply basic Python data structures such as lists and dictionaries, including operations like indexing, slicing, and list comprehension, to manipulate and store data efficiently.', 'Develop proficiency in text processing techniques including tokenization, lemmatization, and the removal of stopwords to prepare text data for analysis.', 'Gain the ability to create visual representations of data using Python libraries such as matplotlib and wordcloud to identify patterns and insights from textual data.', "Learn to conduct sentiment analysis using the NLTK library's SentimentIntensityAnalyzer to evaluate the emotional tone of text data, distinguishing between positive, negative, and neutral sentiments.", 'Acquire skills in exploratory data analysis (EDA) techniques for textual data, including the generation and interpretation of n-grams and the application of statistical methods to derive meaningful insights from large text corpora.'], 2: ['Understand and apply the order of operations in arithmetic, boolean, and string expressions, including the use of functions, parentheses, exponents, and logical operators to evaluate and produce results.', 'Demonstrate the ability to manipulate strings in Python through slicing, concatenation, and the application of string methods to change case, format output, and perform operations on string objects.', "Utilize Python's built-in data structures such as lists and dictionaries, including creating, accessing, and modifying elements, and understand the concepts of indexing, slicing, and iterating over these structures.", 'Develop custom functions in Python, understanding the syntax, parameters, return values, and the ability to handle variable numbers of arguments and keyword arguments, to perform specific tasks or calculations.', 'Implement control flow mechanisms in Python, including conditional statements (if, elif, else) and loops (while and for), to control the execution of code blocks based on conditions and to iterate over sequences or perform repetitive tasks efficiently.'], 3: ["Understand the fundamental concepts and types of databases, with a focus on NoSQL databases like MongoDB, and demonstrate the ability to perform CRUD operations using Python's `pymongo` library.", 'Develop proficiency in managing and querying MongoDB databases, including advanced operations such as aggregation, indexing, and optimizing query performance to support scalable and efficient data-driven applications.', 'Gain a solid foundation in Pandas for data manipulation and analysis in Python, including creating, selecting, and manipulating data in Series and DataFrames, and applying these techniques to real-world data sets.', 'Master the use of Python for data analysis by learning to apply comparison operators, looping constructs, and the apply method in Pandas for complex data transformations and summarization.', 'Acquire a comprehensive understanding of Python programming fundamentals, including variables, data types, control structures, functions, and input/output operations, with an emphasis on writing efficient and readable code.'], 4: ['Understand and apply Python fundamentals, including syntax, variables, data types, operators, conditional statements, loops, functions, and error handling, to solve programming problems.', 'Develop proficiency in using Python libraries such as Numpy for numerical computations and Matplotlib for data visualization, including creating and manipulating arrays and generating various types of plots.', "Gain the ability to work with Python's built-in data structures (lists, tuples, dictionaries, sets) for efficient data manipulation, and perform file operations (reading, writing, and appending) in Python for data processing.", 'Acquire skills in advanced Python concepts such as list comprehensions, lambda expressions, and working with modules, enabling the automation of data processing tasks and the development of more complex data analysis scripts.', 'Understand the basics of text analytics, including the extraction of high-quality information from text data using Python, and apply this knowledge to real-world data analysis tasks involving textual data.'], 5: ['Understand and apply the principles of predictive modeling using linear regression, including data preparation, model fitting, and performance analysis.', 'Develop proficiency in using Python libraries such as matplotlib, numpy, pandas, and sklearn for data manipulation, visualization, and implementation of predictive models.', 'Gain the ability to explore and analyze data through visualizations and statistical measures to identify underlying patterns or relationships.', 'Acquire skills in manipulating and preparing data for modeling, including handling different data formats, encoding/decoding text, and generating synthetic datasets for practice.', 'Learn advanced predictive modeling techniques, such as polynomial regression and model optimization, to improve model accuracy and address non-linear relationships in data.']},
"ReAct" : {0: ['Understand the distinction between text and binary files, and how operating systems interpret files as sequences of bytes.', 'Comprehend the concept of character encoding and decoding, and its significance in file interpretation.', 'Utilize Python to read and write text files with various encodings, and manage encoding errors.', 'Identify the encoding of a file using Python libraries and tools.', 'Develop a foundational understanding of text encoding and decoding, enabling troubleshooting of related errors.'], 1: ['Understand the concept of list indexing and how to access elements within a list using both positive and negative indices.', 'Comprehend the structure and manipulation of multi-dimensional lists (lists of lists) including accessing and modifying elements.', 'Explore list operations such as concatenation and repetition, and learn how to modify lists using methods like pop, remove, and append.', 'Learn the basics of exploratory text analysis including tokenization, lemmatization, and the removal of stopwords.', 'Gain insights into the practical application of text analysis techniques through the exploratory analysis of a historical speech.'], 2: ['Understand and apply the order of operations in arithmetic expressions.', 'Evaluate boolean expressions to produce boolean values (True or False).', 'Understand the concept of strings in Python and how to create and manipulate them.', "Understand and use Python's built-in composite data types, with a focus on lists.", 'Control the flow of a program using conditional statements (if, elif, else).'], 3: ['Understand the basic concepts and types of databases, including the distinction between relational (SQL) and non-relational (NoSQL) databases.', "Gain practical skills in using Python's `pymongo` library to connect to, interact with, and perform CRUD operations on a MongoDB database.", 'Learn how to structure and manipulate data using Pandas in Python, including creating and manipulating Series and DataFrames.', 'Understand the fundamentals of Python programming, including variables, data types, operators, control structures, functions, and input/output operations.', 'Explore advanced MongoDB operations such as aggregation, indexing, and query optimization to manage and query data efficiently.'], 4: ['Understand the basics of Python including its syntax, data types, and key features such as being interpreted, interactive, object-oriented, and portable.', 'Recognize the importance of Python in data analysis, AI, and machine learning domains.', "Identify and use Python's built-in data structures like lists, tuples, dictionaries, and sets.", "Apply Python's built-in functions and modules to simplify coding tasks.", 'Perform basic file operations in Python, including reading from and writing to files, and understand file handling best practices.'], 5: ['Outcome 1: Import essential libraries for data manipulation and visualization in Python.', 'Outcome 2: Load and explore datasets using pandas and visualize data using matplotlib.', "Outcome 4: Apply linear regression models to datasets and interpret the model's coefficients.", 'Outcome 5: Evaluate the performance of linear regression models using metrics like R^2 and RMSE.', 'Outcome 12: Set up a MongoDB Atlas database and connect to it using Python.']},
"Chain_of_Thought_blooms" :{0: ['Outcome 1: Explain the fundamental differences between text and binary files, including how operating systems interpret these files as sequences of bytes, to develop a foundational understanding of file types and their implications for programming.', 'Outcome 2: Demonstrate the ability to read and write text files in Python using various character encodings such as ASCII, UTF-8, and UTF-16, addressing common encoding errors and applying best practices for encoding specification.', 'Outcome 3: Analyze and compare different character encoding standards, including ASCII, Unicode variants (UTF-8, UTF-16), and ISO-8859-x codepages, to understand their historical context, usage, and interoperability in global computing environments.', 'Outcome 4: Evaluate the significance of endianness in data storage and transmission, distinguishing between little-endian and big-endian formats, and apply this knowledge to solve problems related to low-level programming, computer networks, or systems interacting with hardware.', 'Outcome 5: Create Python scripts that effectively manage encoding errors, detect file encodings using libraries like chardet, and handle text data with special characters or emojis, thereby enhancing data handling capabilities for applications in data analytics, web development, and beyond.'], 1: ['Outcome 1: Explain the concepts of tokenization, lemmatization, and the use of stop words in natural language processing, demonstrating an understanding of their roles in preprocessing text data for analysis.', 'Outcome 2: Apply Python programming skills to perform basic operations on lists and dictionaries, including indexing, slicing, concatenation, and the manipulation of list and dictionary elements.', 'Outcome 3: Analyze text data by generating and interpreting word frequencies, n-grams, and word clouds, using Python libraries such as NLTK and WordCloud, to uncover insights from textual content.', 'Outcome 4: Evaluate the sentiment of a given text using the SentimentIntensityAnalyzer from the NLTK library, distinguishing between positive, negative, and neutral sentiments, and understanding the significance of the compound score.', 'Outcome 5: Create visual representations of data analysis results, including bar plots of word frequencies and customized word clouds, to effectively communicate findings from exploratory text analysis.'], 2: ['Outcome 1: Explain the concept of expressions in Python, including the order of operations and how different types of expressions (arithmetic, boolean, string, and mixed) are evaluated to produce a result.', 'Outcome 2: Demonstrate the ability to use string slicing, string methods, and format strings in Python to manipulate and format string data effectively.', 'Outcome 3: Apply list comprehensions in Python to efficiently create lists based on existing lists, using conditions and transformations to generate the desired output.', 'Outcome 4: Analyze and construct Python functions, including understanding the difference between arguments and parameters, utilizing default values, variable-length arguments (*args and **kwargs), and writing functions that return values.', 'Outcome 5: Evaluate and implement control flow mechanisms in Python, including if-elif-else statements for selection and for/while loops for iteration, to manage the execution flow of a program based on conditions and repetitive tasks.'], 3: ['Outcome 1: Explain the fundamental concepts and types of databases, including the distinction between relational (SQL) and non-relational (NoSQL) databases, and articulate the advantages of MongoDB as a NoSQL database for managing JSON-like documents.', "Outcome 2: Demonstrate the ability to perform CRUD (Create, Read, Update, Delete) operations and manage MongoDB databases using Python's `pymongo` library, including connecting to a database, querying documents, and implementing indexing to optimize query performance.", 'Outcome 3: Apply advanced MongoDB operations such as aggregation and indexing in Python to analyze and manage data efficiently, including creating aggregation pipelines to group, filter, and sort data, and creating indexes to improve query execution times.', 'Outcome 4: Utilize Pandas for data manipulation and analysis in Python, including creating, selecting, and manipulating data in Series and DataFrames, and employing data selection techniques with `loc` and `iloc`.', "Outcome 5: Develop proficiency in Python programming fundamentals such as understanding Python's character set, using variables and operators, managing variable scope and lifetime, and implementing input/output operations, with an emphasis on applying these concepts in data-driven applications."], 4: ["Outcome 1: Explain the basic syntax and fundamental concepts of Python programming, including variables, data types, operators, conditional statements, loops, functions, and error handling, demonstrating an understanding of Python's role in data analysis and machine learning.", "Outcome 2: Apply Python's built-in data structures (lists, tuples, dictionaries, and sets) and functions to solve complex data manipulation tasks, and utilize list comprehensions and lambda expressions for efficient data processing.", 'Outcome 3: Analyze and manipulate numerical data using the NumPy library, including performing arithmetic operations on arrays, subsetting, and applying statistical functions to derive insights from data.', "Outcome 4: Develop proficiency in reading from and writing to files in Python, understanding different modes of file operations, and effectively managing file contexts with the 'with' statement for resource management.", 'Outcome 5: Create and interpret basic plots using Matplotlib, including scatter plots and line graphs, to visually represent data, and understand the significance of different plot types and customization options for data analysis.'], 5: ['Outcome 1: Demonstrate the ability to import and use various Python libraries such as matplotlib, numpy, pandas, and sklearn for predictive modeling, ensuring students can set up their environment for data analysis and visualization.', "Outcome 2: Apply linear regression models to datasets using Python's sklearn library, interpret the model's coefficients, and evaluate its performance using metrics such as R^2 and RMSE, preparing students for predictive analytics tasks.", 'Outcome 3: Develop skills in data manipulation and preprocessing in Python, including handling CSV files with pandas, creating scatter plots for data exploration, and transforming data for model fitting, equipping students with essential data science techniques.', 'Outcome 4: Understand and apply concepts of encoding and decoding in Python, including working with different character encodings and handling file I/O operations, to ensure students can manage text data effectively in various formats.', 'Outcome 5: Create and manipulate data structures using Python list and dictionary comprehensions, enabling students to write more concise and efficient code for data analysis and manipulation tasks.']},
"Fewhot" : {0: ['Understand the Fundamentals of Text and Binary Files: Learners will grasp the distinction between text and binary files, understanding that all files are sequences of bytes and the significance of character encoding in interpreting these bytes as intelligible text.', 'Master Character Encoding and Decoding: Students will learn about various character encoding standards such as ASCII, UTF-8, UTF-16, and codepages, and how these affect the representation of text in computers. They will understand the process of encoding and decoding text, and the implications of using different encodings.', 'Apply Encoding Standards in Python: Learners will gain practical skills in handling text files with Python, including specifying file encoding during read/write operations, addressing encoding errors, and identifying file encoding using libraries like chardet.', 'Navigate Complexities of Unicode and Emojis: Participants will explore the expansive world of Unicode, learning to work with a wide range of characters including emojis. They will understand how Unicode supports global languages and symbols, and how to correctly encode and decode these characters in Python.', 'Troubleshoot and Resolve Encoding Issues: Through understanding encoding fundamentals and practical exercises, students will be equipped to troubleshoot and resolve common encoding issues, ensuring correct interpretation and display of text data across different platforms and applications.'], 1: ['Understand and Apply Basic Python Data Structures: Students will learn how to manipulate lists and dictionaries in Python, including indexing, slicing, modifying elements, and performing operations such as concatenation and repetition. They will also understand the difference between mutable and immutable objects and how to copy lists to prevent unintended modifications.', 'Master Text Processing Techniques: Learners will gain proficiency in fundamental text processing techniques such as tokenization, lemmatization, and the removal of stopwords. They will understand how to break down text into manageable pieces for analysis, reduce words to their base forms for consistency, and filter out irrelevant words to focus on meaningful analysis.', 'Conduct Exploratory Text Analysis: Students will be equipped to perform exploratory text analysis using Python libraries. They will learn how to load and preprocess text data, calculate and visualize word frequencies, generate word clouds, and explore n-grams to analyze word sequences. This includes the ability to adjust visualizations for enhanced interpretability.', "Implement Sentiment Analysis: Participants will learn how to apply sentiment analysis to text data to determine the underlying sentiment (positive, negative, neutral). They will use the NLTK library's SentimentIntensityAnalyzer to compute sentiment scores for individual words and entire texts, and visualize the distribution of sentiment across a document.", 'Develop a Comprehensive Understanding of Key NLP Concepts: Through the analysis of a significant historical speech, learners will understand important natural language processing (NLP) concepts such as corpora, tokenization, lemmatization, stopwords, n-grams, word clouds, and sentiment analysis. They will be able to apply these concepts to conduct their own exploratory textual data analysis, gaining insights into the content, structure, and sentiment of text data.'], 2: ['Understand and Apply the Order of Operations in Python: Learners will grasp the hierarchy of operations in Python, including functions, parentheses, exponents, arithmetic operations, relational operators, and logical operators, enabling them to construct complex expressions accurately.', 'Manipulate and Evaluate Various Types of Expressions: Students will become proficient in creating, manipulating, and evaluating arithmetic, boolean, string, and mixed expressions in Python, enhancing their ability to perform mathematical calculations, logical operations, and string manipulations programmatically.', "Implement and Utilize Python Strings and String Methods: Participants will learn to create, slice, and manipulate strings using Python's built-in methods, gaining skills in string formatting, case conversion, and concatenation, which are essential for processing textual data in software development.", 'Develop Custom Functions for Specific Tasks: Learners will acquire the ability to define their own functions in Python, including functions with no arguments, single and multiple arguments, default values, variable-length arguments (*args and **kwargs), and understand the significance of function return values in modular programming.', "Master Python Data Structures and Control Flow: Students will explore Python's built-in composite data types, such as lists and dictionaries, and control flow mechanisms, including selection statements (if, elif, else) and loops (while, for). They will learn to iterate over data structures, access and manipulate their elements, and apply list comprehensions for efficient data processing."], 3: ["Understand the Fundamentals of Databases and MongoDB: Students will learn the basic concepts of databases, including the differences between relational (SQL) and non-relational (NoSQL) databases, with a focus on MongoDB's features, scalability, and flexibility for managing JSON-like documents.", "Develop Proficiency in MongoDB Operations: Learners will gain hands-on experience in performing CRUD (Create, Read, Update, Delete) operations, understanding and applying advanced operations such as aggregation and indexing, and managing MongoDB databases using Python's `pymongo` library.", 'Master Data Manipulation and Query Optimization in MongoDB: Participants will learn to optimize query performance through indexing, execute complex queries using aggregation pipelines, and manage database connections and security, preparing them for developing efficient data-driven applications.', 'Acquire Skills in Pandas for Data Analysis: Students will become proficient in using Pandas for data manipulation and analysis in Python, including creating and manipulating Series and DataFrames, selecting and filtering data, and applying functions for data transformation.', "Explore Python Fundamentals and Best Practices: Learners will delve into Python programming fundamentals, covering topics such as variables, data types, operators, control flow, and functions, with an emphasis on writing clean, efficient code and understanding Python's dynamic typing system."], 4: ['Understand and Apply Python Fundamentals: Learners will gain a foundational understanding of Python programming, including syntax, variables, data types, operators, conditional statements, loops, functions, and commenting. They will be able to write and debug Python scripts for various applications, emphasizing the importance of readability and efficiency.', 'Master Data Manipulation with Numpy: Students will develop proficiency in using the Numpy library for efficient data manipulation, including creating, processing, and performing operations on arrays. They will understand the differences between Numpy arrays and standard Python lists, and how to apply Numpy for mathematical and statistical operations on large datasets.', 'Perform File Operations in Python: Learners will acquire skills in reading from and writing to files in Python, understanding different modes of opening files, and manipulating file pointers. They will practice reading data line by line, character by character, and all at once, as well as writing and appending to files, ensuring data integrity and efficient data processing.', 'Create Visualizations with Matplotlib: Participants will learn to use Matplotlib for data visualization, creating scatter plots, and customizing plots with labels, legends, and styles. They will explore the use of random data generation, conditional coloring, and sizing in scatter plots, and how to interpret data visually for insights.', 'Apply Text Analytics Techniques: Students will be introduced to the field of text analytics, understanding its applications, methodologies, and business implications. They will differentiate between text mining, natural language processing (NLP), and computational linguistics, recognizing the potential of text analytics in deriving insights from unstructured text data for decision-making and strategic planning.'], 5: ['Understand and Apply Predictive Modeling Techniques: Learners will gain the ability to apply predictive modeling techniques using linear and polynomial regression. They will learn how to import necessary libraries, load and explore datasets, fit models to data, and analyze model performance using metrics such as R^2 and RMSE.', 'Master Data Preprocessing and Visualization: Students will develop skills in preprocessing data for predictive modeling, including handling missing values, feature engineering, and normalization. They will also learn to visualize data and regression results using scatter plots and 3D plots to explore relationships within the data.', 'Implement Advanced Regression Analysis: Participants will be able to perform advanced regression analysis by incorporating polynomial features and sinusoidal transformations to capture non-linear relationships within the data. They will understand how to create, fit, and evaluate complex models to improve predictive accuracy.', 'Develop Proficiency in Python for Data Science: Learners will become proficient in using Python for data science tasks, including data manipulation with pandas, numerical operations with NumPy, and creating visualizations with matplotlib. They will also learn to use list and dictionary comprehensions for efficient data processing.', 'Apply Encoding and Decoding Techniques in Text Analysis: Students will comprehend the principles of text encoding and decoding, including character encodings like ASCII and Unicode. They will learn to use Python for reading and writing text files with various encodings, handling encoding errors, and performing exploratory text analysis including tokenization, lemmatization, and sentiment analysis.']}
}


prompt_style_list =['Chain_of_Thought','Zero-Shot','ReAct','Chain_of_Thought_blooms','FewShot']

load_dotenv()

# Sample data structure setup
contents = ["content1", "content2", "content3"]  # Extend this list as needed







def Evaluate_learning_outcomes_for_chunks(content, learning_outcomes):
    api_key = os.getenv('OPENAI_API_KEY')
    delimiter = "###"
    chunk_LOs = {}  # Dictionary to hold learning outcomes for each chunk

    # Initialize OpenAI client with your API key
    client = openai.OpenAI(api_key=api_key)


    
    system_message = f"""
                        \"\"\"

                        As an expert professor specializing in the field of evaluating educational content and learning outcomes, your expertise is now focused on conducting a detailed and structured assessment of a set of learning outcomes derived from the content. Your role involves utilizing your extensive knowledge and experience to critically examine each learning outcome across ten specified criteria: Clarity, Relevance, Depth, Applicability, Specificity, Measurability, Innovation, Breadth, Engagement, and Feedback Incorporation. The input strutre will have content heading trail by ### and section heading . Then content and python list of learning outcome is enclosed in triple backticks ```.  The content has vast topics it may including programing code. Take time and evaluate and be very strict in evaluation.

                        Please proceed to evaluate the questions listed below. Each question should be assessed on its merits, using a scale from 1 to 10, where 1 signifies the lowest level of agreement or relevance, and 10 indicates the highest:


                        1. **Clarity:** Given your expertise, how clearly is the learning outcome articulated? Leverage your background to determine if the outcome is presented in a manner that's easily understandable to both novices and experts in the field.

                        2. **Relevance:** Reflect on your vast experience to evaluate how the learning outcome connects to the key concepts of prompt engineering. Is the learning outcome directly relevant and significant to the core topics of the field?

                        3. **Depth:** Use your scholarly understanding to analyze the level of complexity and depth of understanding indicated by the learning outcome. Does it reflect a deep and nuanced comprehension of the subject matter?

                        4. **Applicability:** Drawing on your professional experience, consider the practical applications of the knowledge or skills described by the learning outcome. How applicable are these in solving real-world problems or in advancing the field of prompt engineering?

                        5. **Specificity:** Assess the precision and focus of the learning outcome, based on your academic rigor. Is the outcome specific and detailed, effectively avoiding broad generalizations?

                        6. **Measurability:** With your background in educational evaluation, determine how the achievement of the learning outcome can be measured or assessed. Are there clear, objective metrics or benchmarks that can be used?

                        7. **Innovation:** Look for elements of creativity or innovative approaches within the learning outcome, as someone who values advancement in education. Does the outcome suggest new, creative uses or adaptations of prompt engineering techniques?

                        8. **Breadth:** As a comprehensive thinker, review the scope covered by the learning outcome. Does it address the topic comprehensively, including multiple aspects and nuances of prompt engineering?

                        9. **Engagement:** Leveraging your insights into student engagement, predict the level of interest the learning outcome is likely to generate among learners. Is it engaging and stimulating, capable of holding the attention of a diverse audience?

                        10. **Feedback Incorporation:** Reflect on the importance of continuous improvement and feedback in education. Consider how well the learning outcome facilitates or incorporates feedback mechanisms for ongoing development.

                        Your task, as an esteemed expert professor in this field, is to meticulously apply your academic and practical expertise through these ten steps, providing a thorough, insightful evaluation of each learning outcome. This process will highlight the educational value and effectiveness of the outcomes, underscoring areas of strength and pinpointing opportunities for further refinement and development.

                        Expected Results structure, Strictly provided only expected result structure as below :

                        {
                        "Clarity of the Learning Outcome": (evaluated score),
                        "Relevance to the Content": (evaluated score),
                        "Depth of Understanding": (evaluated score),
                        "Applicability/Usability": (evaluated score),
                        "Specificity": (evaluated score),
                        "Measurability": (evaluated score),
                        "Innovation and Creativity": (evaluated score),
                        "Breadth of Coverage": (evaluated score),
                        "Learner Engagement": (evaluated score),
                        "Feedback Incorporation": (evaluated score)
                        }


                    \"\"\"

                    """

    user_message = f"""
    \"\"\"
    Hello! I'm enhancing the instructional quality of my course and am seeking an expert's insight to achieve this goal. Specifically, I'm looking for an in-depth evaluation of the learning outcomes I've established for my students, with a focus on how well these outcomes correlate with the educational content I've developed. Could you please review the learning objectives provided within ``` marks and divided by ###?  I am particularly interested in understanding how these outcomes can be measured in terms of their alignment and correlation with the given content, fostering innovation, ensuring comprehensive coverage, enhancing learner engagement, and incorporating feedback for continuous improvement. Your expert analysis in evaluating the connection and coherence between the learning outcomes and the content would be incredibly valuable in refining these aspects and enhancing the overall educational impact of the course. 

    ###Learning outcome 
    ```
    {learning_outcomes}
    ```
    ###Content
    ```
    {content}
    ```

    \"\"\"
    """

    response = client.chat.completions.create(
    model="gpt-4-turbo-preview",
    messages=[
        {"role": "system", "content": system_message.strip()},
        {"role": "user", "content": user_message.strip()}
    ],

    )

    summary = response.choices[0].message.content
    dict_obj = ast.literal_eval(summary)
    logging.info(dict_obj)

    

    return dict_obj

results=[]
# Iterate through each prompt style and its associated content
for prompt_style in prompt_style_list:
    print(f"Evaluating prompt style: {prompt_style}")
    for index, content in enumerate(contents):
        # Retrieve the learning outcomes for the current content and prompt style
        current_learning_outcomes = learning_outcomes[prompt_style][index]
        # Evaluate the learning outcomes for the current content
        evaluation_result=Evaluate_learning_outcomes_for_chunks(content, current_learning_outcomes)
        results.append({"Prompt Style": prompt_style, "Content": content, **evaluation_result})

# List to collect all results for DataFrame conversion
results = []